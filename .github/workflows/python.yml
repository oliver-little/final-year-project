# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python CI

on:
  push:
    branches: [ "master", "develop" ]
    paths:
    - ".github/workflows/python.yml"
    - "python_client/**"
  pull_request:
    branches: [ "master", "develop" ]
    paths:
    - ".github/workflows/python.yml"
    - "python_client/**"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      working-directory: ./python_client
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest cassandra-driver
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      working-directory: ./python_client
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude cluster_client/protobuf/
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude cluster_client/protobuf/
    - name: Test with pytest
      working-directory: ./python_client
      run: |
        python -m pytest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Login to Azure Container Registry'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: 'Generate and push python container'
      working-directory: ./python_client
      run: |
        docker build --tag python_client:latest .
        docker tag python_client:latest ${{ secrets.REGISTRY_LOGIN_SERVER }}/python_client:latest
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/python_client:latest
