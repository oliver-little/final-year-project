syntax = "proto3";

// Represents an Instruction type that can be sent to the system.
message Instruction {
    oneof instruction {
        Select select = 1;
        Filter filter = 2;
        Join join = 3;
        GroupBy group_by = 4;
        Aggregate aggregate = 5;
        OrderBy order_by = 6;
        Window window = 7;
    }
}

// Represents some value accepted by the system.
message Value {
    oneof value {
        string table_field = 1;
        string string = 2;
        string date = 3;
        sint64 int = 4;
        double double = 5;
        bool bool = 6;
    }
}

// Represents an arbitrary function call.
message Expression {
    // Recursive step - an argument to an expression is either a value, or another expression.
    message ExpressionArgument {
        oneof argument {
            Value value = 1;
            Expression expression = 2;
        }
    }
    
    repeated ExpressionArgument arguments = 2;
}

// Represents a Field that does not need to be aliased (used as part of another statement)
message UnnamedField {
    oneof field {
        string table_field = 1;
        Expression expression = 2;
    }
}


// Represents a Field in a Select statement (either a calculated field, or a field from the table).
message NamedField {
    // Represents a calculated field which contains an expression and an output name.
    message CalculatedField {
        string output_field = 1;
        Expression expression = 2;
    }

    oneof field {
        CalculatedField calculated_field = 1;
        string table_field = 2;
    }
}

// A Select statement is made up of any number of Fields (calculated or not)
message Select {
    repeated NamedField fields = 1;
}

// A Filter Statement is made up of two arguments 
// Might need to add AND/ORs to this
message Filter {
    enum FilterType {
        option allow_alias = true;
        UNKNOWN_TYPE = 0;
        EQUAL = 1;
        E = 1;
        NOT_EQUAL = 2;
        NE = 2;
        LESS_THAN = 3;
        LT = 3;
        LESS_THAN_EQUAL = 4;
        LTE = 4;
        GREATER_THAN = 5;
        GT = 5;
        GREATER_THAN_EQUAL = 6;
        GTE = 6;
        IS_NULL = 7;
        NULL = 7;
        IS_NOT_NULL = 8;
        NOT_NULL = 8;
        CONTAINS = 9;
        ICONTAINS = 10;
        STARTS_WITH = 11;
        ISTARTS_WITH = 12;
        ENDS_WITH = 13;
        IENDS_WITH = 14;
    }

    Value left_value = 1;
    FilterType filter_type = 2;
    Value right_value = 3;
}

// A Join statement is made up of two table names, and a join type.
message Join {
    enum JoinType {
        option allow_alias = true;
        UNKNOWN_TYPE = 0;
        FULL_OUTER_JOIN = 1;
        OUTER_JOIN = 1;
        INNER_JOIN = 2;
        LEFT_JOIN = 3;
        RIGHT_JOIN = 4;
        CROSS_JOIN = 5;
    }

    string left_table_name = 1;
    JoinType join_type = 2;
    string right_table_name = 3;
}

// A GroupBy statement is made up a series of Fields (calculated or not)
message GroupBy {
    repeated UnnamedField fields = 1;
}

// An Aggregate statement is made up of any number of aggregated fields
message Aggregate {
    // Define aggregate Field using an aggregate type and a Field
    message AggregateField {
        // Define aggregate functions
        enum AggregateType {
            UNKNOWN_TYPE = 0;
            SUM = 1;
            COUNT = 2;
            AVG = 3;
            MIN = 4;
            MAX = 5;
        }

        UnnamedField field = 1;
        AggregateType aggregate_type = 2;
    }

    repeated AggregateField aggregate_fields = 1;
}

// An OrderBy is made up of any number of Fields, with an ascending/descending flag
message OrderBy {
    enum OrderByType {
        UNKNOWN_TYPE = 0;
        ASC = 1;
        DESC = 2;
    }

    message OrderByField {
        UnnamedField field = 1;
        OrderByType order_by_type = 2;
    }
    repeated OrderByField order_by_fields = 1;
}

// A Window Function
message Window {
    message WindowField {
        enum WindowType {
            UNKNOWN_TYPE = 0;
            LAG = 1;
            LEAD = 2;
            ROW_NUMBER = 3;
            RANK = 4;
        }
        
        UnnamedField field = 1;
        WindowType window_type = 2;
    }
    
    oneof functions {
        Aggregate.AggregateField aggregate_field = 1;
        WindowField window_field = 2;
    }

    repeated string partition_fields = 3;
    OrderBy order_by_fields = 4;
}