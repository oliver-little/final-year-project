syntax = "proto3";

option java_package = "org.oliverlittle.clusterprocess";

// Represents some value accepted by the system.
message Value {
    oneof value {
        string field = 1;
        string string = 2;
        string datetime = 3;
        sint64 int = 4;
        double double = 5;
        bool bool = 6;
        bool null = 7; // Not sure if this is needed
    }
}

// Represents an arbitrary field expression.
// To represent references to tables on their own, this would be an Expression containing a single value with a table_field in it.
message Expression {
    // Recursive step - an argument to an expression is either a value, or a Function Call containing other expressions.
    message FunctionCall {
        string function_name = 1;
        repeated Expression arguments = 2;
    }

    oneof expr {
        FunctionCall function = 1;
        Value value = 2;
    }
}

// Represents a field expression that has been assigned a name
message NamedExpression {
    string name = 1;
    Expression expr = 2;
}

message Table {
    // Represents an transformation that can be applied to the table.
    message TableTransformation {
        oneof instruction {
            Select select = 1;
            Filter filter = 2;
            Join join = 3;
            GroupBy group_by = 4;
            Aggregate aggregate = 5;
            OrderBy order_by = 6;
            Window window = 7;
        }
    }

    repeated TableTransformation transformations = 1;
}

// A Select statement is made up of any number of Fields (calculated or not)
message Select {
    repeated NamedExpression fields = 1;
}

// A Filter Statement is made up of two arguments 
message Filter {
    oneof expression {
         FilterExpression filter = 1;
         CombinedFilterExpression combinedFilter = 2;
    }
}

message CombinedFilterExpression {
    enum BooleanOperator {
        UNKNOWN_TYPE = 0;
        AND = 1;
        OR = 2;
    }

    Filter left_expression = 1;
    BooleanOperator operator = 2;
    Filter right_expression = 3;
}

message FilterExpression {
    enum FilterType {
        option allow_alias = true;
        UNKNOWN_TYPE = 0;
        EQUAL = 1;
        EQ = 1;
        NOT_EQUAL = 2;
        NE = 2;
        LESS_THAN = 3;
        LT = 3;
        LESS_THAN_EQUAL = 4;
        LTE = 4;
        GREATER_THAN = 5;
        GT = 5;
        GREATER_THAN_EQUAL = 6;
        GTE = 6;
        IS_NULL = 7;
        NULL = 7;
        IS_NOT_NULL = 8;
        NOT_NULL = 8;
        CONTAINS = 9;
        ICONTAINS = 10;
        STARTS_WITH = 11;
        ISTARTS_WITH = 12;
        ENDS_WITH = 13;
        IENDS_WITH = 14;
    }

    Expression left_value = 1;
    FilterType filter_type = 2;
    optional Expression right_value = 3; // Right value is optional as null and not null do not require it
}

// A Join statement is made up of two table names, and a join type.
message Join {
    enum JoinType {
        option allow_alias = true;
        UNKNOWN_TYPE = 0;
        FULL_OUTER_JOIN = 1;
        OUTER_JOIN = 1;
        INNER_JOIN = 2;
        LEFT_JOIN = 3;
        RIGHT_JOIN = 4;
        CROSS_JOIN = 5;
    }

    JoinType join_type = 2;
    string table_name = 3;
}

// A GroupBy statement is made up a series of Fields (calculated or not)
message GroupBy {
    repeated Expression group_by_fields = 1;
}

// An Aggregate statement is made up of any number of UnnamedFields (which should use Aggregate functions)
message Aggregate {
    enum AggregateType {
        UNKNOWN_TYPE = 0;
        MIN = 1;
        MAX = 2;
        SUM = 3;
        AVG = 4;
        COUNT = 5;
        COUNT_DISTINCT = 6; 
        STRING_CONCAT = 7;
        STRING_CONCAT_DISTINCT = 8;
    }

    message AggregateExpression {
        AggregateType aggregate_type = 1;
        Expression expr = 2;
        optional string arg = 3; // Used for optional args - e.g: STRING_AGG delimiter
    }
    repeated AggregateExpression aggregate_fields = 1;
}

// An OrderBy is made up of any number of Fields, with an ascending/descending flag
message OrderBy {
    enum OrderByType {
        option allow_alias = true;
        UNKNOWN_TYPE = 0;
        ASC = 1;
        ASCENDING = 1;
        DESC = 2;
        DESCENDING = 2;
    }

    message OrderByField {
        Expression field = 1;
        OrderByType order_by_type = 2;
    }
    repeated OrderByField order_by_fields = 1;
}

// A Window Function is a function (using a Window/Aggregate type, a number of fields to partition on, and a number of fields to order on)
message Window {
    repeated Expression window_function = 1;
    repeated string partition_fields = 2;
    optional OrderBy order_by_fields = 3;
}

// Result messages
// TableResult can be used optionally as it might be better to instead use
message TableResult {
    TableResultHeader headers = 1;
    repeated TableResultRow rows = 2;
}

// Represents data types the system supports
enum DataType {
    UNKNOWN = 0;
    STRING = 1;
    DATETIME = 2;
    INT = 3;
    DOUBLE = 4;
    BOOL = 5;
}

// Headers defining the data types of a table
message TableResultHeader {
    message Header {
        string fieldName = 1;
        DataType dataType = 2;
    }

    repeated Header fields = 1;
}

// A single row result in a table
message TableResultRow {
    repeated Value values = 1;
}

message StreamedTableResult {
    oneof data {
        TableResultHeader header = 1;
        TableResultRow row = 2;
    }
}